// This is a backup file kept for reference. Do not import this file.
// The original file had syntax issues and window reference problems
// See map-selector.tsx for the correct implementation.

'use client';
import React, { useEffect, useState, useRef, useCallback } from 'react';
import { MapContainer, TileLayer, Marker, useMapEvents } from 'react-leaflet';
import L from 'leaflet';
import 'leaflet/dist/leaflet.css';
import './map-styles.css';
import './map-pulse.css';
import { useLeafletCleanup, DEFAULT_MAP_POSITION, isGeolocationAvailable, getCurrentLocation } from './map-utils';
import LocationSearch from './location-search';
import CurrentLocation from './current-location';

// Fix for Leaflet default icons
const DefaultIcon = L.icon({
    iconUrl: '/assets/images/map/marker-icon.png',
    shadowUrl: '/assets/images/map/marker-shadow.png',
    iconSize: [25, 41],
    iconAnchor: [12, 41],
    popupAnchor: [1, -34],
    shadowSize: [41, 41],
});

L.Marker.prototype.options.icon = DefaultIcon;

interface MapSelectorProps {
    initialPosition?: [number, number] | null;
    zoom?: number;
    onChange: (lat: number, lng: number) => void;
    height?: string;
    showSearch?: boolean;
    useCurrentLocationByDefault?: boolean;
}

interface MapClickHandlerProps {
    setPosition: (position: [number, number]) => void;
    onChange: (lat: number, lng: number) => void;
}

// Component to handle map click events
const MapClickHandler: React.FC<MapClickHandlerProps> = ({ setPosition, onChange }) => {
    const map = useMapEvents({
        click: (e) => {
            const { lat, lng } = e.latlng;
            console.log('Map clicked at:', lat, lng);
            setPosition([lat, lng]);
            onChange(lat, lng);
        },
    });

    return null;
};

// Helper to validate coordinates
const isValidPosition = (pos: any): pos is [number, number] => {
    return Array.isArray(pos) && pos.length === 2 && typeof pos[0] === 'number' && typeof pos[1] === 'number' && !isNaN(pos[0]) && !isNaN(pos[1]);
};

const MapSelector: React.FC<MapSelectorProps> = ({ initialPosition = null, zoom = 13, onChange, height = '400px', showSearch = true, useCurrentLocationByDefault = true }) => {
    // Generate a unique ID for this map instance
    const mapInstanceId = useRef<string>(`map-instance-${Math.random().toString(36).substring(2, 11)}`);

    // Validate initial position and use default if not valid
    const validInitialPosition = isValidPosition(initialPosition) ? initialPosition : null;
    const defaultPos = validInitialPosition || DEFAULT_MAP_POSITION;

    const [position, setPosition] = useState<[number, number]>(defaultPos);
    const [address, setAddress] = useState<string>('');
    const [error, setError] = useState<string>('');
    const [isInitializing, setIsInitializing] = useState<boolean>(true);
    const [mapInitialized, setMapInitialized] = useState<boolean>(false);
    const mapRef = useRef<L.Map | null>(null); // Use the cleanup helper for Leaflet global resources
    useLeafletCleanup();

    // Additional cleanup for this specific map instance
    useEffect(() => {
        return () => {
            // Clean up map instance when component unmounts
            if (mapRef.current) {
                console.log('Removing map instance:', mapInstanceId.current);
                mapRef.current.remove();
                mapRef.current = null;
            }
        };
    }, []);

    // Effect to handle initial position or get current location
    useEffect(() => {
        const tryGetCurrentLocation = async () => {
            // If we already have a valid initial position, use it
            if (validInitialPosition) {
                setPosition(validInitialPosition);
                onChange(validInitialPosition[0], validInitialPosition[1]);
                setIsInitializing(false);
                return;
            }

            // Otherwise, try to get current location if requested
            if (useCurrentLocationByDefault && isGeolocationAvailable()) {
                try {
                    const [lat, lng] = await getCurrentLocation();
                    setPosition([lat, lng]);
                    onChange(lat, lng);

                    // Update map view when location is found and map is ready
                    if (mapRef.current) {
                        mapRef.current.setView([lat, lng], 16);
                    }
                } catch (err) {
                    console.log('Could not get initial location, using default', err);
                    // Continue with default position if location not available
                }
            }
            setIsInitializing(false);
        };

        tryGetCurrentLocation();
    }, [validInitialPosition, useCurrentLocationByDefault, onChange]); // Update map view when position changes and map is initialized
    useEffect(() => {
        if (mapInitialized && mapRef.current && !isInitializing) {
            // Prevent unnecessary map updates if already at this position
            const currentCenter = mapRef.current.getCenter();
            if (currentCenter.lat !== position[0] || currentCenter.lng !== position[1]) {
                mapRef.current.setView(position, zoom);
            }
        }
    }, [position, mapInitialized, isInitializing, zoom]);

    // Update position if initialPosition changes from parent
    useEffect(() => {
        if (initialPosition && isValidPosition(initialPosition)) {
            setPosition(initialPosition);

            // Also update map view if already initialized
            if (mapRef.current) {
                mapRef.current.setView(initialPosition, zoom);
            }
        }
    }, [initialPosition, zoom]); // Handler for location search selection - memoized with useCallback
    const handleLocationSelect = useCallback(
        (lat: number, lng: number, selectedAddress: string) => {
            const newPosition: [number, number] = [lat, lng];
            setPosition(newPosition);
            setAddress(selectedAddress);
            onChange(lat, lng);

            // Center map on the selected location
            if (mapRef.current) {
                mapRef.current.setView(newPosition, 16);
            }
        },
        [onChange],
    );

    // Handler for when current location is found - memoized with useCallback
    const handleLocationFound = useCallback(
        (lat: number, lng: number) => {
            const newPosition: [number, number] = [lat, lng];
            setPosition(newPosition);
            setError(''); // Clear any previous errors
            onChange(lat, lng);
        },
        [onChange],
    ); // Handler for location errors - memoized with useCallback
    const handleLocationError = useCallback((message: string) => {
        setError(message);
        setTimeout(() => setError(''), 5000); // Clear error after 5 seconds
    }, []);
    // Handler for map initialization - memoized with useCallback
    const handleMapReady = useCallback(
        () => {
            // Get map instance from the created MapContainer
            if (mapRef.current) {
                mapRef.current.invalidateSize();

                // Only set initialized once to prevent re-render loops
                if (!mapInitialized) {
                    // Use setTimeout to break the render cycle
                    setTimeout(() => {
                        setMapInitialized(true);
                    }, 0);
                }
            }
        },
        [mapInitialized],
    );
    
    // Get reference to the map when it's created
    const handleMapRef = useCallback((map: L.Map | null) => {
        if (map) {
            mapRef.current = map;
        }
    }, []);

    // THIS COMPONENT HAS ISSUES - NESTED MAPCONTAINER IS WRONG
    return (
        <div className="flex flex-col">
            {showSearch && (
                <MapContainer
                    key={`map-${position[0]}-${position[1]}-${Date.now()}-${mapInstanceId.current}`}
                    center={position}
                    zoom={zoom}
                    style={{ height: '100%', width: '100%' }}
                    whenReady={handleMapReady}
                    attributionControl={false}
                    ref={handleMapRef}
                >
                    <MapContainer
                        key={`map-${position[0]}-${position[1]}-${Date.now()}-${mapInstanceId.current}`}
                        center={position}
                        zoom={zoom}
                        style={{ height: '100%', width: '100%' }}
                        whenReady={handleMapReady}
                        attributionControl={false}
                    >
                        <TileLayer attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors' url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />
                        {/* Make sure the marker gets updated whenever position changes */}
                        <Marker key={`${position[0]}-${position[1]}`} position={position} />
                        <MapClickHandler setPosition={setPosition} onChange={onChange} />
                        <CurrentLocation onLocationFound={handleLocationFound} setErrorMessage={handleLocationError} />
                        <div className="leaflet-bottom leaflet-right mb-5 mr-2">
                            <div className="leaflet-control leaflet-control-attribution bg-white bg-opacity-80 dark:bg-gray-800 dark:bg-opacity-80 px-1 py-0.5 text-xs">
                                &copy;{' '}
                                <a href="https://www.openstreetmap.org/copyright" target="_blank" rel="noopener noreferrer">
                                    OpenStreetMap
                                </a>{' '}
                                contributors
                            </div>
                        </div>
                    </MapContainer>
                    <div className="location-selector-overlay">Click on the map to set the shop location</div>
                </MapContainer>
            )}
        </div>
    );
};

// Do not use this component
